name: 'Compile GAP package'
description: 'Compile the given GAP package being tested'
inputs:
  ABI:
    description: 'set to 32 to use 32bit build flags for the package'
    required: false
    default: ''
  coverage:
    description: 'Boolean that determines whether code coverage is turned by adding `--coverage` to `CFLAGS`, `CXXFLAGS` and `LDFLAGS`.'
    required: false
    default: 'true'
  CONFIGFLAGS:
    description: 'additional arguments to be passed to configure'
    required: false
    default: ''
env:
  CHERE_INVOKING: 1

runs:
  using: "composite"
  steps:
    - name: "Prepare the package"
      shell: bash
      run: |
       set -ex

       GAPROOT=${GAPROOT-$HOME/gap}

       # ensure coverage is turned on
       if [[ "${{ inputs.coverage }}" = "true" ]]; then
           export CFLAGS="$CFLAGS --coverage"
           export CXXFLAGS="$CXXFLAGS --coverage"
           export LDFLAGS="$LDFLAGS --coverage"
       fi

       # adjust build flags for 32bit builds
       if [[ "${{ inputs.ABI }}" = 32 ]]; then
           export CFLAGS="$CFLAGS -m32"
           export CXXFLAGS="$CXXFLAGS -m32"
           export LDFLAGS="$LDFLAGS -m32"
       fi

       # build this package, if necessary
       if [[ -x prerequisites.sh ]]; then
           ./prerequisites.sh $GAPROOT
       fi
       if [[ -x autogen.sh ]]; then
           ./autogen.sh
       fi
       if grep Autoconf ./configure > /dev/null
       then
           ./configure --with-gaproot=$GAPROOT ${{ inputs.CONFIGFLAGS }}
           make -j4 V=1
       elif [[ -x configure ]]; then
           ./configure ${{ inputs.CONFIGFLAGS }} $GAPROOT
           make -j4 CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS"
       fi
    - name: "Gather dependencies"
      shell: bash
      run: |
        set -x
        $GAP -A <<GAPInput
            Read("PackageInfo.g");
            name := LowercaseString( GAPInfo.PackageInfoCurrent.PackageName );

            todo := [ name ];
            done := [];
            
            while not IsEmpty( todo ) do
                pkg := Remove( todo );
                AddSet( done, pkg );
                info := GAPInfo.PackagesInfo.(pkg)[1];
                deps := info.Dependencies;
                if IsBound( deps.NeededOtherPackages ) then
                    for pkg in deps.NeededOtherPackages do
                        name := LowercaseString( pkg[1] );
                        if not name in done then
                            AddSet( todo, name );
                        fi;
                    od;
                fi;
                if IsBound( deps.SuggestedOtherPackages ) then
                    for pkg in deps.SuggestedOtherPackages do
                        name := LowercaseString( pkg[1] );
                        if not name in done then
                            AddSet( todo, name );
                        fi;
                    od;
                fi;
                if IsBound( info.Extensions ) then
                    for ext in info.Extensions do
                        ndd := ext.needed;
                        for pkg in ndd do
                            name := LowercaseString( pkg[1] );
                            if not name in done then
                                AddSet( todo, name );
                            fi;
                        od;
                    od;
                fi;
                # Also add extensions?
            od;
            Print(done);
            # ... Write "done" to some file/variable
        GAPInput           
    - name: "Install dependencies"
      shell: bash
      run: |
        # TODO: cd $GAPROOT/pkg &&  ../bin/BuildPackages.sh --strict pkgA pkgB pkgC
        # NOTE: make sure to check folders well? IO should not build IO_ForHomAlg...
        
